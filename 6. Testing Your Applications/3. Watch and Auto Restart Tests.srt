1
00:00:00,570 --> 00:00:05,940
Before you write even one more test case I want to set you up with an automatic way to rerun your test

2
00:00:05,970 --> 00:00:10,740
suite when you change either your test code or your application code.

3
00:00:10,740 --> 00:00:13,310
We're going to be doing that with no man.

4
00:00:13,320 --> 00:00:19,320
Now Previously we used gnomon like this we would type gnomon and we would pass in a file like apt.

5
00:00:19,400 --> 00:00:26,040
Yes whenever any code in our app changed it would rerun the app J js file as a node application.

6
00:00:26,040 --> 00:00:31,200
What we can actually do is specify any command in the world we want to run when our files change.

7
00:00:31,200 --> 00:00:36,150
This means we can rerun NPM tests when the files change.

8
00:00:36,150 --> 00:00:39,590
To do this we're going to use the x E C flag.

9
00:00:39,810 --> 00:00:44,260
This flag tells gnomon that we're going to specify a command to run.

10
00:00:44,310 --> 00:00:48,410
And it might not necessarily be a node file right here in quotes.

11
00:00:48,480 --> 00:00:50,170
We can specify that command.

12
00:00:50,220 --> 00:00:53,440
It's going to be NPM test.

13
00:00:53,580 --> 00:00:59,350
This is Andrew with an update if you are using Windows remember to use double quotes here.

14
00:00:59,700 --> 00:01:02,880
With this in place we can now run the gnomon command.

15
00:01:02,910 --> 00:01:05,730
It's going to kick off for the first time running our test suite.

16
00:01:05,820 --> 00:01:08,300
Here we see we have two tests passing.

17
00:01:08,510 --> 00:01:12,320
I'm going to go ahead into the app and make a change to one of the functions.

18
00:01:12,390 --> 00:01:13,470
So it fails.

19
00:01:13,470 --> 00:01:17,520
I'll add three or four on to the result for ADD.

20
00:01:17,550 --> 00:01:22,650
It automatically restarts over here and now we see that we have a test suite where one test passes and

21
00:01:22,650 --> 00:01:30,220
one test fails I can always go ahead and undo that error save the file and the test suite is automatically

22
00:01:30,220 --> 00:01:31,140
going to rerun.

23
00:01:31,150 --> 00:01:34,490
This is going to make testing your application that much easier.

24
00:01:34,540 --> 00:01:39,370
You won't have to switch to the terminal and rerun the NPM test command every time you make a change

25
00:01:39,490 --> 00:01:41,100
to your application.

26
00:01:41,110 --> 00:01:42,700
Now we have a command that we can run.

27
00:01:42,790 --> 00:01:48,040
I'm going to shut down gnomon and use the up arrow key to show it again right here and we can actually

28
00:01:48,040 --> 00:01:51,120
move this into a script inside a package.

29
00:01:51,160 --> 00:01:57,870
Jason inside a package that Jason we're going to make a new script right after the test script.

30
00:01:57,880 --> 00:02:01,660
Now we've used the start script and the test script and these are built in.

31
00:02:01,720 --> 00:02:08,050
We're going to create a custom one right here called Test hyphen watch and we can run the test watch

32
00:02:08,050 --> 00:02:13,030
script to kick things off inside of here we're going to have the exact same command we ran from the

33
00:02:13,030 --> 00:02:13,760
terminal.

34
00:02:13,780 --> 00:02:16,150
That means we're going to be running gnomon.

35
00:02:16,460 --> 00:02:17,330
We'll be using that.

36
00:02:17,350 --> 00:02:17,970
Yes.

37
00:02:18,020 --> 00:02:19,180
See flag.

38
00:02:19,180 --> 00:02:25,790
And inside of quotes we're going to be running NPM test and now that we have this in place we can run

39
00:02:25,810 --> 00:02:29,890
the script from the terminal as opposed to having to type out this command every single time we want

40
00:02:29,890 --> 00:02:31,870
to start up the auto test suite.

41
00:02:31,870 --> 00:02:32,640
A quick update.

42
00:02:32,640 --> 00:02:35,890
I recommend using the following test watch script.

43
00:02:35,920 --> 00:02:38,230
It's a little more cross OS friendly.

44
00:02:38,350 --> 00:02:43,570
What we have inside of package Jason currently is going to work on OS X and Linux it will also work

45
00:02:43,570 --> 00:02:47,630
on Heroku which uses Linux but it's not going to work on Windows.

46
00:02:47,650 --> 00:02:53,050
The following script the script you see here will as you can see here we're escaping the quotes surrounding

47
00:02:53,050 --> 00:02:58,820
NPM test and we're using double quotes which as we know are the only quotes supported by Windows.

48
00:02:58,870 --> 00:03:04,180
This script will remove any errors you're seeing something like NPM cannot be found which you will get

49
00:03:04,240 --> 00:03:08,860
if you wrap NPM test in single quotes and run the script on Windows.

50
00:03:08,860 --> 00:03:12,550
So use the following script for cross OS compatibility.

51
00:03:14,270 --> 00:03:18,550
To run a script with a custom name like test watch over in the terminal.

52
00:03:18,560 --> 00:03:26,660
All we need to do is run and PM run followed by the script name test hyphen watch.

53
00:03:26,750 --> 00:03:28,670
If I do this it's going to start things off.

54
00:03:28,670 --> 00:03:32,690
We're going to get our test suite and it's still waiting for changes which is fantastic.

55
00:03:32,720 --> 00:03:38,390
Now every time you start the test suite you can simply use NPM run test watch that's going to start

56
00:03:38,390 --> 00:03:44,450
up the test watch script which starts up gnomon every time a change happens in your project.

57
00:03:44,510 --> 00:03:50,360
It's going to rerun NPM test showing the results of the test suite to the screen and that is it for

58
00:03:50,360 --> 00:03:51,060
this one.

59
00:03:51,080 --> 00:03:56,150
Now that we have a way to automatically restart our test suite Let's go ahead and get back into the

60
00:03:56,150 --> 00:03:58,250
specifics of testing in that node.

61
00:03:58,250 --> 00:03:59,040
Stay tuned.

62
00:03:59,080 --> 00:04:00,350
We'll see you next time

