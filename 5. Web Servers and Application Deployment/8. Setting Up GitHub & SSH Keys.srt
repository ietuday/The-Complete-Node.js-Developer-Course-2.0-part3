1
00:00:00,260 --> 00:00:05,340
It now that you have a local get repository we're going to look at how we can take that code and push

2
00:00:05,340 --> 00:00:10,590
it up to a third party service called Get hub get how that is going to let us host our repositories

3
00:00:10,590 --> 00:00:11,460
remotely.

4
00:00:11,460 --> 00:00:13,810
So if our machine never crashes we can get our code back.

5
00:00:13,920 --> 00:00:19,050
And it also has great collaboration tools so we can open source a project letting others use our code

6
00:00:19,200 --> 00:00:20,660
or we can keep it private.

7
00:00:20,730 --> 00:00:24,540
So only people we choose to collaborate with can see the source code.

8
00:00:24,700 --> 00:00:29,190
Now in order to actually communicate between our machine and get how we're going to have to create something

9
00:00:29,190 --> 00:00:35,120
called an S-sh key S-sh keys were designed to securely communicate between two computers.

10
00:00:35,190 --> 00:00:38,620
In this case it's going to be our machine and the get hub server.

11
00:00:38,660 --> 00:00:43,170
This is going to let us confirm that get hub is who they say they are and it's going to like get help

12
00:00:43,170 --> 00:00:47,270
confirm that we indeed have access to the code we're trying to alter.

13
00:00:47,290 --> 00:00:51,720
This is all going to be done with S-sh keys and we're going to create them first then we'll configure

14
00:00:51,720 --> 00:00:57,900
them and finally we'll push our code up to get up the process of setting up S-sh keys can be a real

15
00:00:57,900 --> 00:00:58,620
burden.

16
00:00:58,620 --> 00:01:03,300
This is one of those videos I have in most of my courses and it often gets the most questions because

17
00:01:03,300 --> 00:01:07,740
there's really small room for error if you type any of the commands wrong things are just not going

18
00:01:07,740 --> 00:01:08,850
to work as expected.

19
00:01:08,850 --> 00:01:13,090
So if you pay attention closely to any video let it be this one.

20
00:01:13,110 --> 00:01:18,270
Now if you're on Windows you're going to need to do everything I do in this video from a get bash as

21
00:01:18,270 --> 00:01:22,710
opposed to the regular command prompt because we're going to be using some commands that just are not

22
00:01:22,710 --> 00:01:24,030
available on Windows.

23
00:01:24,030 --> 00:01:26,730
They are however available on Linux and Mac.

24
00:01:26,730 --> 00:01:31,020
So if you're using either of those operating systems you can continue using the terminal you've been

25
00:01:31,020 --> 00:01:32,900
using throughout the course.

26
00:01:32,970 --> 00:01:37,800
Before we dive into the commands I want to show you a quick guide that exists online in case you get

27
00:01:37,860 --> 00:01:46,290
stuck or you have any questions you can google get hub S-sh key is and this is going to link you to

28
00:01:46,290 --> 00:01:52,050
an article called that generating an S-sh key and once you're here you'll be able to click this S-sh

29
00:01:52,110 --> 00:01:52,880
breadcrumb.

30
00:01:53,040 --> 00:01:56,340
And this is going to bring you back to all of their articles on S-sh keys.

31
00:01:56,340 --> 00:02:00,900
These four right here the nested four are the ones we're going to be focusing on checking if we have

32
00:02:00,900 --> 00:02:04,480
a key generating a new key adding the key to get.

33
00:02:04,500 --> 00:02:07,650
And finally testing that everything worked as expected.

34
00:02:07,650 --> 00:02:12,600
If you run into any problems along any of these steps you can always click the guide for that step and

35
00:02:12,600 --> 00:02:14,650
you can pick the operating system you're using.

36
00:02:14,670 --> 00:02:18,370
So you can see the appropriate commands for that OS.

37
00:02:18,660 --> 00:02:21,820
Now that you know this exists let's go ahead and do it together.

38
00:02:21,900 --> 00:02:25,920
The first command we're going to run from the terminal is going to check if we have an existing S-sh

39
00:02:25,920 --> 00:02:26,540
key.

40
00:02:26,550 --> 00:02:28,330
Now if you don't that's fine.

41
00:02:28,350 --> 00:02:29,540
We're going to go ahead and create one.

42
00:02:29,580 --> 00:02:34,170
If you do or you're not sure you do you can run the following command to confirm whether or not you

43
00:02:34,170 --> 00:02:37,890
have one ls with the a al flag.

44
00:02:37,890 --> 00:02:43,260
This is going to print all of the files in a given directory and the directory were S-sh keys are stored

45
00:02:43,260 --> 00:02:47,580
by default on your machine is going to be at the user directory which you can use.

46
00:02:47,580 --> 00:02:52,100
Tell us a shortcut for forward slash dot S-sh.

47
00:02:52,380 --> 00:02:56,880
When you run the command you're going to see all of the contents inside of that S-sh directory.

48
00:02:57,030 --> 00:03:01,790
In this case I've deleted all of my S-sh keys so I have nothing inside in my directory.

49
00:03:01,830 --> 00:03:05,320
I just have a path for the current directory and the previous one.

50
00:03:05,490 --> 00:03:09,750
Now that we have this in place and we've confirmed we don't have a key we can go ahead and generate

51
00:03:09,750 --> 00:03:10,040
one.

52
00:03:10,050 --> 00:03:16,710
If you do already have a key a file like ID underscore RSA You can go ahead and skip the process of

53
00:03:16,710 --> 00:03:19,110
generating the key to make a key.

54
00:03:19,140 --> 00:03:23,080
We're going to use the S-sh hyphen key Jeon command.

55
00:03:23,250 --> 00:03:25,040
Now the S-sh hyphen key.

56
00:03:25,050 --> 00:03:32,100
Jan with an end the command takes three arguments we're going to pass in the setting equal to RSA.

57
00:03:32,160 --> 00:03:34,290
We're going to pass in B which is for bytes.

58
00:03:34,320 --> 00:03:36,710
Setting that equal to 42 96.

59
00:03:36,780 --> 00:03:38,810
Make sure to match these arguments exactly.

60
00:03:38,910 --> 00:03:44,490
And we're going to be setting a capital C flag which is going to get set equal to your e-mail.

61
00:03:44,490 --> 00:03:48,940
Now the scope of what's actually happening behind the scenes is not part of this course.

62
00:03:48,960 --> 00:03:54,010
S-sh keys and setting up security that could be an entire course in and of itself.

63
00:03:54,120 --> 00:03:57,830
We're going to be using this command to simplify the entire process right here.

64
00:03:57,990 --> 00:03:59,130
I'm going to type in my email.

65
00:03:59,160 --> 00:04:03,190
Andrew Joseph Meade at gmail dot com.

66
00:04:03,210 --> 00:04:04,320
Perfect.

67
00:04:04,320 --> 00:04:09,980
Now I can go ahead and hit enter which is going to generate two new files in our S-sh folder.

68
00:04:10,170 --> 00:04:13,400
When you run this command you're going to get greeted with a few steps.

69
00:04:13,500 --> 00:04:15,560
I want you to use the default for all of them.

70
00:04:15,720 --> 00:04:18,420
Here they want to ask you if you want to customize the file name.

71
00:04:18,420 --> 00:04:20,100
I do not recommend doing that.

72
00:04:20,100 --> 00:04:21,500
You can just hit enter.

73
00:04:21,510 --> 00:04:24,500
Next up they ask you for a passphrase which we're not going to use.

74
00:04:24,570 --> 00:04:28,190
I'm going to hit enter for no passphrase then I need to confirm the passphrase.

75
00:04:28,210 --> 00:04:33,510
So I'll just hit enter again and right here we get a little message that our S-sh key was properly created

76
00:04:33,720 --> 00:04:36,110
and that it was indeed saved in our folder.

77
00:04:36,120 --> 00:04:41,580
You can see that right here with this in place I can now cycle back through my previous commands running

78
00:04:41,580 --> 00:04:42,800
that last command.

79
00:04:42,810 --> 00:04:51,960
And what do I get I get ID underscore RSA and I get the ID underscore RSA a pub file the RSA file contains

80
00:04:51,960 --> 00:04:53,520
the private key.

81
00:04:53,520 --> 00:04:58,070
This is the key you should never give to anyone it lives on your machine and your machine only if the

82
00:04:58,070 --> 00:05:00,540
DOT pugged file that is the public file.

83
00:05:00,540 --> 00:05:05,170
This one is the one you're going to give to third party services like get hub or Heroku which you'll

84
00:05:05,170 --> 00:05:07,390
be doing in the next several videos.

85
00:05:07,440 --> 00:05:12,780
Now that our keys are generated the last thing we need to do is start up the S-sh agent and add this

86
00:05:12,780 --> 00:05:15,030
key so it knows that it exists.

87
00:05:15,060 --> 00:05:17,550
We're going to do this by running two commands.

88
00:05:17,550 --> 00:05:25,410
First up we're going to run evil then we're going to open some quotes inside of here we'll use the dollar

89
00:05:25,410 --> 00:05:29,240
sign and open and close some parentheses just like this.

90
00:05:29,430 --> 00:05:37,400
And inside of our parentheses we're going to type S-sh hyphen agent space with the flag.

91
00:05:37,440 --> 00:05:42,420
This is going to start up the SS agent program and it's also going to print the process id to confirm

92
00:05:42,420 --> 00:05:43,500
it is indeed running.

93
00:05:43,620 --> 00:05:50,280
And right here we get Agent PD 1 6 5 4 7 the process ID is obviously going to be different as long as

94
00:05:50,280 --> 00:05:51,610
you get something back like this.

95
00:05:51,630 --> 00:05:53,180
You are good to go.

96
00:05:53,190 --> 00:06:00,260
Next up we have to tell the S-sh agent where this file lives we're going to do that using S-sh hyphen.

97
00:06:00,380 --> 00:06:07,050
And this takes the path to our private key file which we have in the user directory forward Slashdot

98
00:06:07,110 --> 00:06:11,550
S-sh forward slash ID underscore RSA.

99
00:06:11,550 --> 00:06:14,840
When I run this I should get a message like identity added.

100
00:06:14,880 --> 00:06:20,220
This means that the local machine now knows about this public private key pair and it will try to use

101
00:06:20,220 --> 00:06:24,300
these credentials when it communicates with a third party service like get hub.

102
00:06:24,630 --> 00:06:27,600
Now that we have this in place we are ready to configure get hub.

103
00:06:27,690 --> 00:06:31,350
We're going to make an account set it up and it will come back here and test that things are working

104
00:06:31,530 --> 00:06:33,470
as expected.

105
00:06:33,500 --> 00:06:38,990
And now let's head into the browser and go to get hub dot com here we'll be able to log into our existing

106
00:06:38,990 --> 00:06:41,410
account or create a new one if you need a new one.

107
00:06:41,420 --> 00:06:43,740
Fill out this form if you have an existing one.

108
00:06:43,760 --> 00:06:45,340
Go ahead and sign an above.

109
00:06:45,500 --> 00:06:49,430
Take a moment to pause the video until you see the screen that I see here.

110
00:06:49,460 --> 00:06:51,060
This is your get hub dashboard.

111
00:06:51,080 --> 00:06:52,880
When you're done go ahead and click play

112
00:06:56,190 --> 00:07:00,550
all right I'm going to assume that you're seeing your dashboard from here we're going to navigate into

113
00:07:00,550 --> 00:07:05,530
these settings over here about the profile picture go down to settings and in there we're going to go

114
00:07:05,530 --> 00:07:10,370
to the S-sh page which is available under S-sh and g.p keys.

115
00:07:10,480 --> 00:07:16,570
From here we can add that public key letting get hub know that we want to communicate using S-sh.

116
00:07:16,750 --> 00:07:19,900
I'm going to add the new S-sh key and you need to do two things.

117
00:07:19,900 --> 00:07:23,110
One give it a name and the name can be anything you like.

118
00:07:23,140 --> 00:07:26,950
I usually use one that uniquely identifies my computer since I have a couple.

119
00:07:27,220 --> 00:07:33,120
I'm going to use MacBook Pro just like this.

120
00:07:33,150 --> 00:07:36,170
Next up we need to grab the contents of that ID.

121
00:07:36,180 --> 00:07:42,420
RSA pub file that contains the information that you get how needs in order to securely communicate between

122
00:07:42,420 --> 00:07:44,880
our machine and their machines.

123
00:07:44,910 --> 00:07:50,730
We can grab this using a few different methods over in the browser we have that adding a new S-sh key

124
00:07:50,730 --> 00:07:52,550
to your get help account article.

125
00:07:52,670 --> 00:07:57,690
This contains a command you can use to copy the contents of that file to your clipboard from right inside

126
00:07:57,690 --> 00:07:58,560
of the terminal.

127
00:07:58,560 --> 00:08:02,900
Now obviously it is different for Mac Windows and Linux.

128
00:08:02,940 --> 00:08:05,880
So go ahead and run the command for your operating system.

129
00:08:05,880 --> 00:08:10,730
You could also go ahead and open it up with a regular text editor and copy the contents of the file.

130
00:08:10,730 --> 00:08:11,800
It doesn't matter how you do it.

131
00:08:11,970 --> 00:08:13,680
All that matters is you do.

132
00:08:13,680 --> 00:08:17,870
I'm going to use the P.B. copy command which is available only on OS X.

133
00:08:17,880 --> 00:08:23,740
I'm going to move into the terminal and I'm going to run it this copies the contents of the file to

134
00:08:23,740 --> 00:08:24,670
the clipboard.

135
00:08:24,670 --> 00:08:29,590
Now I can move back in to get help click the text area and paste it in.

136
00:08:29,710 --> 00:08:34,510
Take a moment to copy the contents of the RSA pub paste it into the field.

137
00:08:34,570 --> 00:08:39,380
It should start with S-sh hyphen RSA and it should end with that email you used.

138
00:08:39,490 --> 00:08:42,210
Once you're done go ahead and click add S-sh.

139
00:08:42,250 --> 00:08:43,540
Take a moment to pause the video.

140
00:08:43,540 --> 00:08:44,150
Knocked out.

141
00:08:44,170 --> 00:08:45,750
And when you're done click play

142
00:08:48,670 --> 00:08:53,390
all right I'm going to assume at this point you have that S-sh key added to get a job.

143
00:08:53,400 --> 00:08:57,880
Now we can go ahead and test that things are working by running one command from the terminal.

144
00:08:57,890 --> 00:09:01,210
Once again this command can be executed from anywhere on your machine.

145
00:09:01,220 --> 00:09:04,510
You don't need to be in your project folder to do this.

146
00:09:04,580 --> 00:09:07,320
We're going to use S-sh which tries to make a connection.

147
00:09:07,370 --> 00:09:09,730
We're going to use the flag followed by the you are.

148
00:09:09,730 --> 00:09:13,970
We want to connect to get at it get hub dot com.

149
00:09:14,030 --> 00:09:15,510
This is going to test our connection.

150
00:09:15,530 --> 00:09:19,910
It's going to make sure that the S-sh keys are properly set up and we can securely communicate with

151
00:09:19,910 --> 00:09:20,660
get help.

152
00:09:20,840 --> 00:09:26,420
When I run the command I get a message saying that the authenticity of the host get how BCom can't be

153
00:09:26,420 --> 00:09:27,530
established.

154
00:09:27,530 --> 00:09:29,730
We know that we want to communicate with dot com.

155
00:09:29,750 --> 00:09:33,770
We're expecting that communication to happen so we can go ahead and hit yes.

156
00:09:33,920 --> 00:09:36,970
From here we get a message from the get hub servers.

157
00:09:37,000 --> 00:09:41,120
Hi Andrew J Mead which is my username you should see your username here.

158
00:09:41,240 --> 00:09:46,760
We have successfully authenticated but how does NOT provide Schale access if you are seeing this message

159
00:09:46,790 --> 00:09:48,120
then you are done.

160
00:09:48,230 --> 00:09:52,070
You're ready to create your first repository and push your code up.

161
00:09:52,070 --> 00:09:55,250
Now if you're not seeing this message something went wrong along the way.

162
00:09:55,250 --> 00:09:59,780
Maybe the S-sh key wasn't generated correctly or it's not getting recognized by yet.

163
00:09:59,960 --> 00:10:03,550
Go ahead and open a question in the Q&amp;A for this lecture.

164
00:10:03,560 --> 00:10:05,220
I would be happy to debug.

165
00:10:05,240 --> 00:10:06,560
I know this can be a real burden.

166
00:10:06,560 --> 00:10:09,680
It's pretty tricky to set up if you're seeing this message.

167
00:10:09,730 --> 00:10:15,320
What we're going to do is move in to get hub go back to the home page and we're going to create a new

168
00:10:15,320 --> 00:10:16,880
repository.

169
00:10:16,880 --> 00:10:19,480
Right here we have our new repository button.

170
00:10:19,620 --> 00:10:21,340
All we need to do is give it a name.

171
00:10:21,470 --> 00:10:27,910
I'm going to call this one node hyphen course to web server.

172
00:10:28,020 --> 00:10:31,380
Once you have an end you could give it an optional description and you can pick whether you want to

173
00:10:31,380 --> 00:10:33,990
go with a public or private repository.

174
00:10:33,990 --> 00:10:37,420
Now private repositories do put you on a seven dollar plan.

175
00:10:37,440 --> 00:10:41,000
I do recommend that if you're creating projects with companies.

176
00:10:41,130 --> 00:10:45,030
In this case though we're creating pretty simple projects and it doesn't really matter if someone else

177
00:10:45,030 --> 00:10:45,980
finds the code.

178
00:10:45,990 --> 00:10:49,640
So I'm going to go ahead and use a public repository by clicking that option.

179
00:10:49,860 --> 00:10:53,970
Once you have those two things filled out you can click Create repository and you're going to get brought

180
00:10:53,970 --> 00:10:59,630
to your repository page and it's giving you a little set up because currently there is no code to view.

181
00:10:59,730 --> 00:11:03,370
So it's giving you a few instructions depending on which situation you're in.

182
00:11:03,450 --> 00:11:05,330
The first one is for creating a new repository.

183
00:11:05,340 --> 00:11:06,320
We don't need that.

184
00:11:06,420 --> 00:11:10,680
And the last one is for importing our code from some other you are Alloa we're not going to do what

185
00:11:10,680 --> 00:11:14,840
we have is an existing repository and we want to push it from the command line.

186
00:11:14,980 --> 00:11:18,420
We're going to run these two commands from inside of our project.

187
00:11:18,420 --> 00:11:22,530
The first one adds a new remote to our Get repository remotes.

188
00:11:22,570 --> 00:11:26,050
Let get know which third party you are else you want to sync up with.

189
00:11:26,130 --> 00:11:29,610
Maybe I want to push my code to get help to communicate with my coworkers.

190
00:11:29,700 --> 00:11:33,840
Maybe I also want to be able to push up to Heroku to deploy my app.

191
00:11:33,840 --> 00:11:35,490
That means you would want two remotes.

192
00:11:35,640 --> 00:11:42,080
In our case we're just going to add one so I'm going to copy this you r l move into the terminal paste

193
00:11:42,080 --> 00:11:43,080
it and hit enter.

194
00:11:44,510 --> 00:11:49,610
Now that we have our get remote and we can go ahead and run that second command this second command

195
00:11:49,610 --> 00:11:54,440
which will be using extensively throughout the course is going to take our code and push it up to get

196
00:11:54,440 --> 00:12:01,220
hub in the terminal we can copy and paste the code run the command and right here we can see everything

197
00:12:01,280 --> 00:12:02,160
went great.

198
00:12:02,210 --> 00:12:07,820
We were able to successfully write all of our data up to get up and if we go back into the browser and

199
00:12:07,820 --> 00:12:10,930
refresh the page we're no longer going to see the set up instructions.

200
00:12:10,930 --> 00:12:16,080
Instead we're going to see our repository kind of like a treeview here I can see we have our server

201
00:12:16,090 --> 00:12:17,780
J S file which is great.

202
00:12:17,810 --> 00:12:21,950
I don't see the logfile or node modules which is good because we ignored that.

203
00:12:21,970 --> 00:12:23,170
I have my public directory.

204
00:12:23,180 --> 00:12:25,730
Everything works really really well.

205
00:12:25,730 --> 00:12:28,170
We also have issue tracking poll requests.

206
00:12:28,190 --> 00:12:31,580
You can create a wiki which lets you set up instructions for your repository.

207
00:12:31,580 --> 00:12:34,410
There's a lot of really great features that get hub has to offer.

208
00:12:34,430 --> 00:12:37,110
There are entire courses dedicated to using get hub.

209
00:12:37,280 --> 00:12:41,630
So I'd recommend checking one of those out we're going to be using just the very basic features over

210
00:12:41,630 --> 00:12:42,020
here.

211
00:12:42,110 --> 00:12:47,660
You can see we have one commit and if you click that one commit button you can actually go to the commit

212
00:12:47,660 --> 00:12:52,070
page and here we see the initial commit message that we typed when we made that commit.

213
00:12:52,130 --> 00:12:56,900
This is going to let us keep track of all of our code revert if we make unwanted changes and manage

214
00:12:56,900 --> 00:12:58,790
our repository.

215
00:12:58,790 --> 00:13:00,370
Now though we have our code pushed up.

216
00:13:00,380 --> 00:13:05,810
We are done in the next video we're going to look at how we can communicate with Heroku to deploy our

217
00:13:05,810 --> 00:13:06,460
code.

218
00:13:06,480 --> 00:13:12,350
Then after that we'll look at some real world workflows for creating new commits pushing to get hub

219
00:13:12,350 --> 00:13:17,540
and deploying to Heroku by the end of this section you'll be a master at the process so fear not as

220
00:13:17,540 --> 00:13:20,780
long as you're able to see your code here then you are all set up.

221
00:13:20,780 --> 00:13:23,690
You'll never need to touch those S-sh keys again.

222
00:13:23,750 --> 00:13:24,310
Stay tuned.

223
00:13:24,310 --> 00:13:25,890
I will see you next time.

