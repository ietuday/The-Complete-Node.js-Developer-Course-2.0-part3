1
00:00:00,660 --> 00:00:04,910
In this video you're going to deploy your node app live to the web using Heroku.

2
00:00:04,950 --> 00:00:09,080
By the end you'll have the you are and you can get anybody and they'll be able to go to that you are

3
00:00:09,080 --> 00:00:12,120
all in their browser to view the application.

4
00:00:12,120 --> 00:00:15,930
We're going to do this via Heroku Heroku is a Web site.

5
00:00:15,990 --> 00:00:20,060
It's a web app for managing web applications that are hosted in the cloud.

6
00:00:20,220 --> 00:00:21,480
It's a really great service.

7
00:00:21,480 --> 00:00:28,080
They make it almost effortless to create new apps deploy your apps update apps and add cool add ons

8
00:00:28,110 --> 00:00:31,670
things like logging an error tracking all of that is built in.

9
00:00:31,680 --> 00:00:36,690
Now Heroku like a good hub does not require a credit card to sign up and there is a free tier which

10
00:00:36,690 --> 00:00:37,770
we'll be using.

11
00:00:37,770 --> 00:00:41,990
They have paid plans for just about everything but we can get away with the free tier for everything.

12
00:00:42,000 --> 00:00:44,670
We'll be doing in this course to kick things off.

13
00:00:44,670 --> 00:00:51,090
We're going to open up the browser and go to Heroku dot com here and we can go ahead and sign up for

14
00:00:51,090 --> 00:00:52,020
a new account.

15
00:00:52,080 --> 00:00:56,430
Take a quick moment to either log into your existing one or sign up for a new one.

16
00:00:56,460 --> 00:00:59,390
I'm going to go ahead and log in to show you the dashboard.

17
00:00:59,430 --> 00:01:04,650
I want you to pause the video go through that sign up process and once you see the dashboard you can

18
00:01:04,650 --> 00:01:06,310
go ahead and click play.

19
00:01:06,330 --> 00:01:10,560
Now your dashboard is going to look something like this although there might be a greeting telling you

20
00:01:10,560 --> 00:01:12,040
to create a new application.

21
00:01:12,060 --> 00:01:13,260
You can go ahead and ignore that.

22
00:01:13,260 --> 00:01:14,390
I have a bunch of apps.

23
00:01:14,400 --> 00:01:15,240
You won't have these.

24
00:01:15,240 --> 00:01:16,800
That is perfectly fine.

25
00:01:16,800 --> 00:01:22,440
Just take a moment to create your account log in and when you see something like this go ahead and click

26
00:01:22,440 --> 00:01:24,660
click.

27
00:01:24,780 --> 00:01:29,190
At this point I'm going to assume that you have a Heroku account and that you were able to log in.

28
00:01:29,190 --> 00:01:34,670
And this is great because the next thing we're going to do is install the Heroku command line tools.

29
00:01:34,680 --> 00:01:40,170
This is going to let us create apps deploy apps open apps and do all sorts of really cool stuff from

30
00:01:40,170 --> 00:01:44,790
the terminal without having to come into the webapp that's going to save us time and make development

31
00:01:44,820 --> 00:01:46,170
a lot easier.

32
00:01:46,170 --> 00:01:55,200
We can grab that download by going to toolbelt doc Heroku dot com here we're able to grab the installer

33
00:01:55,200 --> 00:01:57,660
from whatever platform you happen to be running on.

34
00:01:57,720 --> 00:02:00,330
I'm going to go ahead and grab mine for Mac.

35
00:02:00,330 --> 00:02:02,220
I'm going to start the download.

36
00:02:02,220 --> 00:02:07,290
It's a really small download so it should happen pretty quickly once it's done we can go ahead and run

37
00:02:07,290 --> 00:02:11,300
through the process.

38
00:02:11,300 --> 00:02:13,760
This is a simple installer where you just click next.

39
00:02:13,760 --> 00:02:16,430
There is no need to customize anything.

40
00:02:16,430 --> 00:02:20,600
You don't have to enter any specific information about your Heroku account.

41
00:02:20,690 --> 00:02:24,530
I'm going to go ahead and complete the installer and all this really is going to do is give us a new

42
00:02:24,530 --> 00:02:26,740
command from the terminal that we can execute.

43
00:02:26,930 --> 00:02:32,030
And before we can do that we do have to log in locally in the terminal and that's exactly what we're

44
00:02:32,030 --> 00:02:33,500
going to do next.

45
00:02:33,500 --> 00:02:38,620
So take a moment to pause the video and get to the step where the installation was completed successfully.

46
00:02:38,630 --> 00:02:42,750
When you're done you can go ahead and click play.

47
00:02:42,930 --> 00:02:48,240
By now I'm going to assume that you have installed the Heroku toolbelt for your operating system.

48
00:02:48,240 --> 00:02:50,940
Now what I'd like you to do is go ahead and start up the terminal.

49
00:02:50,940 --> 00:02:55,920
If you already have it running you might need to restart it in order for your operating system to recognize

50
00:02:55,980 --> 00:02:57,110
the new command.

51
00:02:57,120 --> 00:03:03,590
You can test that it got installed properly by running Heroku hyphen hyphen help when you run this command.

52
00:03:03,640 --> 00:03:07,150
You're going to see that it's installing the CLID for the first time and then you're going to get all

53
00:03:07,150 --> 00:03:08,510
of the help information.

54
00:03:08,560 --> 00:03:12,810
This will tell you what commands you have access to and exactly how they work.

55
00:03:12,820 --> 00:03:18,010
Now we are going to need to log in to the Heroku account locally and this process is pretty simple.

56
00:03:18,010 --> 00:03:19,790
Here we have all of the commands available.

57
00:03:19,840 --> 00:03:27,350
And one of them happens to be log in we can run Heroku log in just like this to start the process.

58
00:03:27,430 --> 00:03:29,450
I'm going to go ahead and run the log in command.

59
00:03:29,530 --> 00:03:34,950
And now we just use the email and password that we had set up before I'm going to type in my email.

60
00:03:37,550 --> 00:03:39,950
That I'm going to go ahead and type in my password.

61
00:03:39,950 --> 00:03:45,490
Typing is hidden because it's secure and when I do that you see logged in as Andrew.

62
00:03:45,510 --> 00:03:48,980
Joseph Mead shows up and this is fantastic.

63
00:03:49,030 --> 00:03:53,340
And now we're logged in and we're able to successfully communicate between our machines command line

64
00:03:53,370 --> 00:03:55,040
and the Heroku servers.

65
00:03:55,050 --> 00:03:59,760
This means we can get started creating and deploying applications.

66
00:03:59,790 --> 00:04:03,210
Next up I'm going to use the clear command to clear the terminal output.

67
00:04:03,210 --> 00:04:07,280
And now we're going to go ahead and get our S-sh key on Heroku.

68
00:04:07,320 --> 00:04:11,430
Kind of like what we did with get up only this time we can do it via the command line so it's going

69
00:04:11,430 --> 00:04:16,020
to be a lot easier in order to add our local keys to Heroku.

70
00:04:16,050 --> 00:04:20,390
We're going to run Heroku space keys colon.

71
00:04:20,410 --> 00:04:27,600
And this is going to scan our S-sh directory and add the key up here you can see it found a key id RSA

72
00:04:27,610 --> 00:04:28,490
pub file.

73
00:04:28,510 --> 00:04:30,060
Would you like to upload it to Heroku.

74
00:04:30,070 --> 00:04:31,370
Yes I would.

75
00:04:31,660 --> 00:04:32,490
Excellent.

76
00:04:32,500 --> 00:04:34,780
Now we have R-KY uploader that is all it took.

77
00:04:34,780 --> 00:04:42,450
Much easier than it was to configure with get up from here we can use the Heroku keys command to print

78
00:04:42,480 --> 00:04:48,330
all of the keys currently on our account and we could always go ahead and remove them using Heroku keys

79
00:04:49,420 --> 00:04:53,610
call and remove followed by the e-mail related to that key.

80
00:04:53,640 --> 00:04:57,210
In this case we're going to keep the Heroku key that we have.

81
00:04:57,210 --> 00:05:07,200
Next up we can test our connection using S-sh with the flag get at Heroku dot com.

82
00:05:07,370 --> 00:05:12,200
This is going to communicate with the Heroku servers and right here you can see it's asking that same

83
00:05:12,200 --> 00:05:15,110
question authenticity of the host can't be established.

84
00:05:15,110 --> 00:05:16,300
Do you want to continue.

85
00:05:16,490 --> 00:05:17,690
Yes.

86
00:05:17,690 --> 00:05:20,970
Now when you run that command you're going to get a lot of cryptic output.

87
00:05:21,080 --> 00:05:25,940
What you're looking for is authentication succeeded and then in parentheses public key if things did

88
00:05:25,940 --> 00:05:31,450
not go well you're going to see the permission denied message with public key in parentheses.

89
00:05:31,550 --> 00:05:35,900
In this case the authentication was successful which means we are good to go.

90
00:05:35,900 --> 00:05:38,110
I'm going to go ahead and run clear one more time.

91
00:05:38,120 --> 00:05:40,220
Clearing the terminal output.

92
00:05:40,220 --> 00:05:45,350
Now we can turn our attention towards the application code because before we can deploy to Heroku we

93
00:05:45,350 --> 00:05:47,930
are going to need to make two changes to the code.

94
00:05:47,930 --> 00:05:52,790
These are things that Heroku expects your app to have in place in order to run properly because Heroku

95
00:05:52,790 --> 00:05:57,830
does a lot of things automatically which means you have to have some basic stuff set up for Heroku to

96
00:05:57,830 --> 00:05:58,350
work.

97
00:05:58,370 --> 00:06:00,390
Now I promise it's not too complex.

98
00:06:00,440 --> 00:06:03,380
Some really simple changes a couple of one liners.

99
00:06:03,380 --> 00:06:07,700
First up in server J ass down at the very bottom of the file we have the port.

100
00:06:07,700 --> 00:06:10,980
Our app listens to statically coded inside of server.

101
00:06:11,010 --> 00:06:14,730
Yes we need to make this dynamic which means we want to use a variable.

102
00:06:14,870 --> 00:06:19,490
We're going to be using an environment variable that Heroku was going to set Heroku will tell your app

103
00:06:19,520 --> 00:06:24,170
which port to use because that port will change as you deploy your app which means that we're going

104
00:06:24,170 --> 00:06:28,920
to be using that environment variable so we don't have to swap out our code every time we want to deploy.

105
00:06:28,970 --> 00:06:33,450
That would be a super big pain and would actually be impossible with environment variables.

106
00:06:33,560 --> 00:06:39,020
Heroku can set a variable on the operating system your node app can read that variable and it can use

107
00:06:39,020 --> 00:06:40,460
it as the port.

108
00:06:40,460 --> 00:06:42,450
Now all machines have environment variables.

109
00:06:42,450 --> 00:06:48,890
You can actually view the ones on your machine by running NVI on Linux or OSX or the set command on

110
00:06:48,890 --> 00:06:49,850
Windows.

111
00:06:49,850 --> 00:06:53,620
And what you're going to get when you do that is a really long list of key value pairs.

112
00:06:53,660 --> 00:06:59,350
And this is all environment variables are here we have a log name environment variables set.

113
00:06:59,360 --> 00:07:05,300
Andrew I have a home environment variable set to my home directory all sorts of environment variables

114
00:07:05,360 --> 00:07:07,100
throughout my operating system.

115
00:07:07,100 --> 00:07:12,590
One of these that Heroku is going to set is called port which means we need to go ahead grab that port

116
00:07:12,590 --> 00:07:17,290
variable and use it here instead of 3000 up at the very top of the file.

117
00:07:17,300 --> 00:07:22,550
I'd like you to make a constant called port and this is going to store the port that we're going to

118
00:07:22,550 --> 00:07:24,090
use for the app.

119
00:07:24,170 --> 00:07:30,940
Now the first thing we're going to do is grab a port from process dot EMV process.

120
00:07:30,970 --> 00:07:36,440
Envy is an object that stores all of our environment variables as key value pairs.

121
00:07:36,490 --> 00:07:41,590
We're looking for one the Heroku is going to set called Port awesome.

122
00:07:41,660 --> 00:07:46,490
This is going to work great for Heroku But when we run the app locally the port environment variable

123
00:07:46,490 --> 00:07:47,410
is not going to exist.

124
00:07:47,420 --> 00:07:51,540
So we're going to go ahead and set a default using the OR operator right here.

125
00:07:52,610 --> 00:07:53,540
If process.

126
00:07:53,560 --> 00:07:55,340
Ian B-cup port does not exist.

127
00:07:55,340 --> 00:07:58,420
We'll set port equal to 3000 instead.

128
00:07:58,430 --> 00:07:59,400
Excellent.

129
00:07:59,430 --> 00:08:04,920
Now we have an app that's configured to work with Heroku and to still run locally just like it did before.

130
00:08:04,940 --> 00:08:09,960
All we have to do is take the port variable and use that down below instead of 3000 right here.

131
00:08:10,140 --> 00:08:13,280
I'm going to reference port and down below inside of our message.

132
00:08:13,280 --> 00:08:17,220
I'm going to swap it out for template strings.

133
00:08:17,280 --> 00:08:19,140
I'll paste the old text back in.

134
00:08:19,230 --> 00:08:25,840
And now I can replace 3000 with the injected port variable which is going to change over time.

135
00:08:26,190 --> 00:08:30,050
With this in place we have now fixed the first problem with our app.

136
00:08:30,150 --> 00:08:35,010
And if I run node server from the terminal like we did earlier I'm still going to get the exact same

137
00:08:35,010 --> 00:08:35,430
message.

138
00:08:35,460 --> 00:08:37,350
Server is up on port 3000.

139
00:08:37,380 --> 00:08:40,220
So your app will still work locally as expected.

140
00:08:40,230 --> 00:08:46,030
Next up we have to specify a script in package dot Jason inside a package.

141
00:08:46,050 --> 00:08:50,310
Jason you might have noticed we have a script object and there we have a test script.

142
00:08:50,310 --> 00:08:52,560
This gets set by default for NPM.

143
00:08:52,710 --> 00:08:56,180
We can create all sorts of scripts inside of here that do whatever we like.

144
00:08:56,190 --> 00:08:59,220
A script is nothing more than a command that we run from the terminal.

145
00:08:59,310 --> 00:09:03,870
So I can take this command node server dock jackass and turn into a script instead.

146
00:09:03,930 --> 00:09:06,740
And that's exactly what we're going to do right here.

147
00:09:06,900 --> 00:09:09,360
We're going to go ahead and add a new script.

148
00:09:09,780 --> 00:09:12,010
The script needs to be called start.

149
00:09:12,030 --> 00:09:16,920
This is a very specific and built in script and we're going to set it equal to the command that starts

150
00:09:16,920 --> 00:09:17,490
our app.

151
00:09:17,490 --> 00:09:20,550
In this case it's going to be node space server.

152
00:09:20,670 --> 00:09:26,160
Yes this is necessary because when Heroku tries to start our app it's not going to run a node with your

153
00:09:26,160 --> 00:09:28,580
file name because it doesn't know what your file name is called.

154
00:09:28,680 --> 00:09:33,570
Instead it's going to run the start script and the start script will be responsible for doing the proper

155
00:09:33,570 --> 00:09:33,890
thing.

156
00:09:33,900 --> 00:09:36,920
In this case booting up that server file.

157
00:09:36,960 --> 00:09:42,980
Now we can run our app using that start script from the terminal by using NPM start just like this.

158
00:09:43,050 --> 00:09:48,450
When I do that we get a little output related to NPM and then we get server is up on port three thousand.

159
00:09:48,510 --> 00:09:53,280
And if we visit the app in the browser everything works exactly as it did before.

160
00:09:53,340 --> 00:09:56,360
The big difference is that we are now already for Heroku.

161
00:09:56,610 --> 00:10:01,200
We could also run the test script using from the terminal NPM test.

162
00:10:01,230 --> 00:10:03,600
This is something that we'll be doing a little later in the course.

163
00:10:03,600 --> 00:10:07,570
For now we have no tests specified and that is expected.

164
00:10:07,800 --> 00:10:12,270
The next step in the process is going to be to make that commit and then we can finally start getting

165
00:10:12,270 --> 00:10:14,780
it up on the web from the terminal.

166
00:10:14,790 --> 00:10:20,730
We're going to use some of those get commands we explored earlier in this section first up and get status.

167
00:10:20,970 --> 00:10:26,280
When I run get status we have something a little new instead of new files we have modified files.

168
00:10:26,280 --> 00:10:28,400
Here we have a modified package.

169
00:10:28,440 --> 00:10:32,040
Jason File and we have a modified server doc Jap's file.

170
00:10:32,040 --> 00:10:36,390
These are not going to be committed if we were to run and get commit just yet we still have to use GET

171
00:10:36,390 --> 00:10:36,960
add.

172
00:10:37,050 --> 00:10:45,040
And what we're going to do is run get ADD with the dot as the next argument dot is going to add every

173
00:10:45,040 --> 00:10:48,520
single thing showing up and get status to the next commit.

174
00:10:48,520 --> 00:10:53,020
Now I only recommend using the syntax of everything you have listed here are things you actually want

175
00:10:53,020 --> 00:10:53,660
to commit.

176
00:10:53,770 --> 00:10:56,170
And in our case that is indeed what we want.

177
00:10:56,170 --> 00:10:58,990
If I run get ADD and then rerun it get status.

178
00:10:58,990 --> 00:11:01,170
I can now see what is going to be committed next.

179
00:11:01,240 --> 00:11:03,540
Under the changes to be committed Hetter.

180
00:11:03,550 --> 00:11:07,260
Here we have our packaged Jason File and the server data file.

181
00:11:07,270 --> 00:11:09,330
Now we can go ahead and make that commit.

182
00:11:09,430 --> 00:11:15,580
I'm going to run and get commit with the flags so we can specify our message and a good message for

183
00:11:15,580 --> 00:11:24,760
this commit would be something like set up start script and Heroku port.

184
00:11:24,920 --> 00:11:25,880
Excellent.

185
00:11:25,890 --> 00:11:29,150
Now we can go ahead and run that command which is going to make that commit.

186
00:11:29,300 --> 00:11:35,160
And now we can go ahead and push that up to get hub using get push and we can leave off the Orjan remote

187
00:11:35,210 --> 00:11:37,570
because the origin is the default remote.

188
00:11:37,700 --> 00:11:38,830
I'm going to go ahead and run.

189
00:11:38,840 --> 00:11:39,400
Push.

190
00:11:39,410 --> 00:11:40,940
This is going to push it up to get help.

191
00:11:40,940 --> 00:11:46,850
And now we are ready to actually create the app push our code up and view it over in the browser.

192
00:11:46,880 --> 00:11:52,160
The next step in the process is going to be to run a command called Heroku create from the terminal

193
00:11:52,530 --> 00:11:58,760
Heroku create needs to get executed from inside of your application just like we run our get commands

194
00:11:58,970 --> 00:12:02,000
when I run your Roku create a couple things are going to happen first.

195
00:12:02,150 --> 00:12:05,390
It's going to make a real new application over in the Heroku web app.

196
00:12:05,390 --> 00:12:09,110
It's also going to add a new remote to your get repository.

197
00:12:09,110 --> 00:12:13,130
Now remember we have an origin remote which points to our Get hub repository.

198
00:12:13,130 --> 00:12:18,430
We're going to have a Heroku remote which points to our Heroku get repository.

199
00:12:18,650 --> 00:12:23,810
When we deploy to the Heroku repository Heroku is going to see that it's going to take the changes and

200
00:12:23,810 --> 00:12:25,380
it's going to deploy them into the web.

201
00:12:25,610 --> 00:12:28,830
When we run Heroku create all of that happens.

202
00:12:28,850 --> 00:12:34,190
Now we do still have to push up to this you are all in order to actually do the deploying process.

203
00:12:34,310 --> 00:12:36,020
And we can do that using get push

204
00:12:38,800 --> 00:12:44,690
followed by Heroku the brand new remote that was just added because we ran Heroku create.

205
00:12:44,890 --> 00:12:48,790
Now pushing this time around is going to go through the normal process and then you're going to start

206
00:12:48,790 --> 00:12:49,960
seeing some logs.

207
00:12:50,080 --> 00:12:53,920
And these are logs coming back from Heroku letting you know how your app is deploying.

208
00:12:53,980 --> 00:12:57,290
It's going through the entire process showing you what happens along the way.

209
00:12:57,430 --> 00:13:02,430
As you can see that took about 10 seconds and at the very end we have some success messages.

210
00:13:02,470 --> 00:13:04,870
The app was launched successfully right here.

211
00:13:04,870 --> 00:13:09,810
It also verified that the app was deployed successfully and that it did indeed pass from here.

212
00:13:09,850 --> 00:13:13,420
We actually have a u r l we can visit that you are Ellas right here.

213
00:13:13,450 --> 00:13:16,260
We can take it copy and paste it in the browser.

214
00:13:16,390 --> 00:13:21,240
What I'm going to do instead is use a command Heroku open Heroku.

215
00:13:21,250 --> 00:13:25,420
Open is going to open up the Heroku app in the default browser.

216
00:13:25,510 --> 00:13:31,270
When I run this is going to switch over to Chrome and right here we get our application showing up just

217
00:13:31,270 --> 00:13:32,230
as expected.

218
00:13:32,290 --> 00:13:36,110
I can switch between pages and everything works just like it did locally.

219
00:13:36,430 --> 00:13:40,200
Now we have a U R L and this u r l was given to us by Heroku.

220
00:13:40,210 --> 00:13:45,870
This is the default way Heroku generates app you are else if you have your own domain registration company

221
00:13:45,880 --> 00:13:49,800
you can go ahead and configure its DNS to point to this application.

222
00:13:49,810 --> 00:13:54,730
This is going to let you use a custom You are Alphie or Heroku app you have to refer to the specific

223
00:13:54,730 --> 00:14:00,180
instructions for your domain registrar in order to do that but it can indeed be done.

224
00:14:00,430 --> 00:14:05,730
Now that we have this in place we have successfully deployed our node applications live to Heroku.

225
00:14:05,740 --> 00:14:08,650
And this is just fantastic.

226
00:14:08,770 --> 00:14:14,110
In order to do this all we had to do was make a commit to change our code and push it up to a new get

227
00:14:14,110 --> 00:14:14,810
remote.

228
00:14:14,830 --> 00:14:17,820
It could not be easier to deploy our code.

229
00:14:17,920 --> 00:14:23,110
You could also manage your application by going back over to the Heroku dashboard.

230
00:14:23,110 --> 00:14:27,680
If you give it a refresh you should see that brand new you are out somewhere down below.

231
00:14:27,790 --> 00:14:31,190
Remember mine was sleepy retreat yours is going to be something else.

232
00:14:31,300 --> 00:14:34,330
If I scroll down I have sleepy retreat right here.

233
00:14:34,330 --> 00:14:39,880
I can click it and I can view the app page here we can do a lot of configuration we can manage the activity

234
00:14:39,880 --> 00:14:42,340
and access so we can collaborate with others.

235
00:14:42,400 --> 00:14:48,040
We have metrics we have resources all sorts of really cool stuff with this in place we are now done

236
00:14:48,040 --> 00:14:51,190
with our basic deploying video in the next video.

237
00:14:51,190 --> 00:14:53,920
Your challenge is going to be to go through that process again.

238
00:14:54,010 --> 00:14:58,210
You're going to add some changes to the node app you're going to commit them deploy them and view them

239
00:14:58,240 --> 00:14:59,600
live in the web.

240
00:14:59,930 --> 00:15:01,080
That's all coming up next.

241
00:15:01,090 --> 00:15:01,960
So stay tuned.

242
00:15:01,970 --> 00:15:03,410
I will see you next time

