1
00:00:00,270 --> 00:00:05,220
In this video Your challenge is going to be to go through the entire development lifecycle from having

2
00:00:05,220 --> 00:00:07,110
an idea to deploying it.

3
00:00:07,110 --> 00:00:09,220
You're going to create the code locally.

4
00:00:09,270 --> 00:00:14,550
You'll be testing it locally then you're going to make a commit push it up to get hub and finally deploy

5
00:00:14,550 --> 00:00:17,430
it to Heroku where it'll be visible live on the web.

6
00:00:17,430 --> 00:00:18,680
That is the entire process.

7
00:00:18,690 --> 00:00:23,940
I want you to run through now whether you're using get hub in a Roku or other services the process is

8
00:00:23,940 --> 00:00:25,280
still really similar.

9
00:00:25,290 --> 00:00:29,640
So it's a good idea to get comfortable going through this process early on as it's something you'll

10
00:00:29,640 --> 00:00:32,480
be doing when you're adding new features.

11
00:00:32,490 --> 00:00:36,770
Your challenge is going to be to add a new projects page to our Web site.

12
00:00:36,780 --> 00:00:40,280
This page is a place where later on you can link to your get have projects.

13
00:00:40,350 --> 00:00:44,790
That means you're going to need to register a new you are all down below and we're going to be rendering

14
00:00:44,790 --> 00:00:48,050
a handlebars template you off to create that you are.

15
00:00:48,110 --> 00:00:50,430
It's going to be a forward slash projects.

16
00:00:50,430 --> 00:00:56,280
You also need to make that view file and in the view file kind of like we do for home and about.

17
00:00:56,280 --> 00:01:01,590
I want you to render everything including the header and footer and inside of the actual Web site you

18
00:01:01,590 --> 00:01:08,430
can just render a message like Portfolio page here inside of the Parshall's header file.

19
00:01:08,430 --> 00:01:12,320
I also want you to add a new link for the new projects page.

20
00:01:12,420 --> 00:01:16,350
So when you're on the home page you can go to projects and when you're on the projects page you can

21
00:01:16,350 --> 00:01:19,720
go to home or about wherever you like.

22
00:01:19,740 --> 00:01:24,180
Now once you're done and you have tested this locally meaning you've opened it up on localhost three

23
00:01:24,180 --> 00:01:29,430
thousand and you can see the projects page you're ready to make that comment go ahead and make that

24
00:01:29,430 --> 00:01:31,720
commit then push it up to get hub.

25
00:01:31,860 --> 00:01:37,650
The last step in the process is going to be to push it up to that Heroku remote using get Pusch Heroku

26
00:01:37,740 --> 00:01:39,910
which is going to deploy it live to the web.

27
00:01:39,960 --> 00:01:44,820
Once you're done you can open up your app inside of the browser and I want you to check to make sure

28
00:01:44,820 --> 00:01:47,920
the project's page shows up as expected.

29
00:01:48,910 --> 00:01:51,340
We've gone through all these steps before but take your time.

30
00:01:51,340 --> 00:01:53,010
There is no rush.

31
00:01:53,020 --> 00:01:56,150
Once you have things ready you can go ahead and click play

32
00:01:59,240 --> 00:02:00,080
how to go.

33
00:02:00,240 --> 00:02:04,590
Hopefully you are able to go through that entire process without too much trouble.

34
00:02:04,590 --> 00:02:09,960
We're going to get started by creating the local changes that means I'm going to register a new u r

35
00:02:09,960 --> 00:02:16,630
l right here using app dot get we're going to create a new page of forward slash projects which is why

36
00:02:16,630 --> 00:02:24,070
I have that as the route for my HTP get handler inside of the second argument we can specify our callback

37
00:02:24,070 --> 00:02:30,880
function which we'll get called with request and response and like we do for the other routes above

38
00:02:30,880 --> 00:02:36,840
the route route and are about route we're going to be calling response dot render to render our template

39
00:02:38,440 --> 00:02:40,680
inside of the render arguments list.

40
00:02:40,690 --> 00:02:43,540
We're going to provide two the first one will be the file name.

41
00:02:43,600 --> 00:02:46,460
The file doesn't exist but we can still go ahead and call Rander.

42
00:02:46,540 --> 00:02:54,090
I'm going to call it projects dot B.S. And then we can specify the options we want to pass to the template.

43
00:02:54,240 --> 00:03:00,660
In this case we're just going to set page title setting and equal to projects with a capital P.

44
00:03:00,680 --> 00:03:01,760
Excellent.

45
00:03:01,760 --> 00:03:05,920
Now with this in place the server file is all done there's no more changes there.

46
00:03:05,930 --> 00:03:11,840
What I am going to do is go ahead and go to the views directory creating a new file called Projects

47
00:03:12,880 --> 00:03:17,830
HB abs in here we'll be able to configure our template to kick things off.

48
00:03:17,830 --> 00:03:21,340
I'm going to copy the template from the About page sense it's really similar.

49
00:03:21,520 --> 00:03:29,860
I'll copy it close about pasted into projects and I'm just going to change this text to project page

50
00:03:30,190 --> 00:03:31,550
text would go here.

51
00:03:32,780 --> 00:03:38,640
Then we can save the file and make our last change and the last thing we want to do is update the header.

52
00:03:38,660 --> 00:03:43,190
We now have a brand new projects page that lives at forward slash projects.

53
00:03:43,190 --> 00:03:47,580
So we're going to want to go ahead and add that to the header links list right here.

54
00:03:47,600 --> 00:03:54,000
I mean to create a new paragraph tag and then I'm going to make a anchor tag.

55
00:03:54,880 --> 00:04:01,270
The text for the link will be projects with a capital P and the graph which is the u r l to visit when

56
00:04:01,270 --> 00:04:02,390
that link is clicked.

57
00:04:02,410 --> 00:04:07,690
We're going to set that equal to forward slash projects just like we do for about where we set it equal

58
00:04:07,690 --> 00:04:11,210
to forward slash about now that we have this in place.

59
00:04:11,350 --> 00:04:16,270
All of our changes are done and we are ready to test things out locally.

60
00:04:16,480 --> 00:04:21,810
I'm going to fire up the app locally using node with server dot jast as the file to start.

61
00:04:21,940 --> 00:04:27,280
We're up on localhost 3000 so over in the browser I can move to the localhost tab as opposed to the

62
00:04:27,280 --> 00:04:30,310
Heroku app tab and click refresh right here.

63
00:04:30,310 --> 00:04:32,220
We have home which goes to home.

64
00:04:32,230 --> 00:04:37,810
We have about which goes to about and we have projects which does indeed go to forward slash projects

65
00:04:38,020 --> 00:04:44,930
rendering the projects page project page text would go here with this in place we're now done locally.

66
00:04:45,010 --> 00:04:46,050
We have the changes.

67
00:04:46,060 --> 00:04:47,140
We've tested them.

68
00:04:47,170 --> 00:04:49,360
Now it's time to go ahead and make that commit.

69
00:04:49,510 --> 00:04:51,750
That's going to happen over inside the terminal.

70
00:04:51,850 --> 00:04:55,430
I'm going to shut down the server and run and get status.

71
00:04:55,450 --> 00:04:59,970
This is going to show me all of the changes to my repository as of the last commit.

72
00:04:59,980 --> 00:05:01,660
I have two modified files.

73
00:05:01,660 --> 00:05:05,560
The server file and the header file and I have my brand new projects file.

74
00:05:05,560 --> 00:05:07,270
All of this looks great.

75
00:05:07,270 --> 00:05:13,090
I want to add all of this to the next commit so I can use a get ad with the DOT to do just that.

76
00:05:13,090 --> 00:05:18,040
Now before I actually make the commit I do like to test that the proper things got added by running

77
00:05:18,040 --> 00:05:22,240
get status right here I can see my changes to be committed are showing up in green.

78
00:05:22,240 --> 00:05:24,250
Everything looks great.

79
00:05:24,250 --> 00:05:27,970
Next up we're going to run and get commit to actually make the commit.

80
00:05:27,970 --> 00:05:33,250
This is going to save all of the changes into the get repository a message for this one would be something

81
00:05:33,250 --> 00:05:42,320
like add project page with a commit made the next thing you needed to do was push up to get up.

82
00:05:42,320 --> 00:05:45,540
This is going to back our code up and let others collaborate on it.

83
00:05:45,560 --> 00:05:48,290
I'm going to use get push to do just that.

84
00:05:48,290 --> 00:05:52,710
Remember we can leave off the origin remote as origin is the default remote.

85
00:05:52,730 --> 00:05:54,880
So if you leave off a remote it'll just use that.

86
00:05:54,880 --> 00:06:01,400
Anyways with our get hub repository updated the last thing to do is deploy to Heroku and we do that

87
00:06:01,520 --> 00:06:08,040
by pushing up the get repository using get push to the Heroku remote.

88
00:06:08,340 --> 00:06:14,790
When we do this we get our long list of logs as the Heroku server goes through the process of installing

89
00:06:14,790 --> 00:06:18,600
our A.P.M. modules building the app and actually deploying it.

90
00:06:18,600 --> 00:06:22,830
Once it's done we're going to get brought back to the terminal like we are here and then we can open

91
00:06:22,830 --> 00:06:24,320
up the you are l in the browser.

92
00:06:24,480 --> 00:06:30,430
Now I can copy it from here or run her Roku open since I already have a tab open with you or Alan place.

93
00:06:30,480 --> 00:06:32,640
I'm going to simply give it a refresh.

94
00:06:32,670 --> 00:06:37,260
Now you might have a little delay as you refresh your app sometimes starting up the app right after

95
00:06:37,260 --> 00:06:41,230
a new app was deployed can take about 10 to 15 seconds.

96
00:06:41,280 --> 00:06:45,330
That's only going to happen as you first visit it other times where you click the refresh button.

97
00:06:45,330 --> 00:06:47,700
It should reload instantly.

98
00:06:47,700 --> 00:06:49,760
Now we have the projects page and if I visit.

99
00:06:49,770 --> 00:06:51,250
Everything looks awesome.

100
00:06:51,330 --> 00:06:56,210
The nav bar is working great and the projects page is indeed rendering at forward slash projects.

101
00:06:56,270 --> 00:06:58,410
With this in place we are now done.

102
00:06:58,470 --> 00:07:00,690
We've gone through the process of adding a new feature.

103
00:07:00,780 --> 00:07:06,590
Testing it locally making a get commit pushing it up to get help and deploying it to Heroku.

104
00:07:06,630 --> 00:07:11,340
We now have a workflow for building a real world web applications using knode.

105
00:07:11,340 --> 00:07:17,850
J.S. this also brings it close to this section in this section you learn about Express and how it can

106
00:07:17,850 --> 00:07:20,300
be used to easily create Web sites.

107
00:07:20,370 --> 00:07:26,210
We can make a web site that returns HGL now or we can make an h t t p u r l that returns some Jason

108
00:07:26,220 --> 00:07:26,880
data.

109
00:07:26,880 --> 00:07:31,140
This is going to let us create all sorts of applications which we'll be doing throughout the rest of

110
00:07:31,140 --> 00:07:31,990
the course.

111
00:07:32,040 --> 00:07:35,510
You also learn about get it get hub Ben Heroku these are the tools.

112
00:07:35,520 --> 00:07:40,880
I prefer to use when I'm creating applications I like to use get because it's super popular.

113
00:07:40,890 --> 00:07:43,240
It's basically the only choice these days.

114
00:07:43,260 --> 00:07:48,180
I like to use GET HOW because it has a great user interface it has a ton of awesome features and pretty

115
00:07:48,180 --> 00:07:49,920
much everyone else is using it too.

116
00:07:49,920 --> 00:07:55,770
There's a great community and I like to use Heroku because it is just dead simple to deploy new versions

117
00:07:55,770 --> 00:07:57,420
of your application.

118
00:07:57,480 --> 00:08:03,060
You can swap out any of these tools with any other tools you can use websites like Amazon Web Services

119
00:08:03,060 --> 00:08:03,780
to host.

120
00:08:03,840 --> 00:08:06,730
You could use bitbucket as your hub alternative.

121
00:08:06,750 --> 00:08:09,210
These are perfectly fine solutions.

122
00:08:09,210 --> 00:08:12,580
All that really matters is you have some tools that are working for you.

123
00:08:12,600 --> 00:08:18,300
You have a repository backed up somewhere whether it's get Hobb or bitbucket and you have an easy way

124
00:08:18,300 --> 00:08:19,040
to deploy.

125
00:08:19,140 --> 00:08:23,150
So you can make changes quickly and get them out to your users fast.

126
00:08:23,190 --> 00:08:25,350
That is it for this section is stay tuned.

127
00:08:25,350 --> 00:08:27,030
I will see you next time

